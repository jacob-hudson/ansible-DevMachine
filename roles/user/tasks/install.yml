---
- name: Update Apple App Store software and OS X
  become: yes
  shell: softwareupdate -ia
  register: softwareupdate_result
  when: ansible_system == "Darwin"
  changed_when: "'No updates are available.' not in softwareupdate_result.stderr"

- name: Ensure Homebrew /usr/local/{bin,sbin} is in $PATH
  lineinfile: dest="{{ home_dir }}/.bash_profile"
              create=yes
              regexp="^export PATH=\/usr\/local\/bin"
              line="export PATH=/usr/local/bin:/usr/local/sbin:$PATH"
  when: ansible_system == "Darwin"

- name: Tap Homebrew repositories
  homebrew_tap: tap={{ item }} state=present
  with_items: "{{ homebrew_taps }}"
  when: ansible_system == "Darwin"

- name: Update existing Homebrew packages
  homebrew: update_homebrew=yes upgrade_all=yes
  when: ansible_system == "Darwin"

- name: Install Homebrew packages
  homebrew: >
    name={{ item.name | default(item) }}
    state={{ item.state | default('latest') }}
    install_options={{
      item.install_options | default() | join(',')
      if item.install_options is not string
      else item.install_options
    }}
  with_items:
      - "{{ homebrew_packages }}"
      - "{{ homebrew_completions_packages }}"
  when: ansible_system == "Darwin"

- name: Install Homebrew casks
  homebrew_cask: name={{ item }} state=installed
  with_items: "{{ homebrew_cask_packages }}"
  when: ansible_system == "Darwin"

- name: Remove Ansible default hosts
  shell: "if [[ ! -d /etc/ansible/hosts ]]; then mv /etc/ansible/hosts /etc/ansible/hosts.old; fi"
  when: ansible_system == "Linux"

# - name: Convert Ansible default hosts file into a directory
#   file: path="/etc/ansible/hosts" state=directory
#   when: ansible_system == "Linux"

- name: Restore Ansible default hosts
  shell: "if [[ -e /etc/ansible/hosts.old ]]; then mv /etc/ansible/hosts.old /etc/ansible/hosts/hosts; fi"
  when: ansible_system == "Linux"

- name: Ansible localhost configuration in /etc/ansible/hosts/
  lineinfile: dest="/etc/ansible/hosts/localhost"
              create=yes
              line="localhost ansible_connection=local ansible_python_interpreter=/usr/bin/python2"
  when: ansible_system == "Linux"

- name: Ansible localhost configuration in /usr/local/etc/ansible/hosts/
  lineinfile: dest="/usr/local/etc/ansible/hosts/localhost"
              create=yes
              line="localhost ansible_connection=local"
  when: ansible_system == "Darwin"
